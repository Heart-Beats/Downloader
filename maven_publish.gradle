apply plugin: 'maven-publish'

def myGroupId = 'com.hl'
def myArtifactId = 'downloader'
def myVersion = '1.0.0'

afterEvaluate {
    publishing {
        publications {
            downloader(MavenPublication) {
                from components.release

                groupId myGroupId
                artifactId myArtifactId
                version myVersion

                // 替换关联的Library 例如: implementation project(':example-annotation')，上传后 version 为unspecified
                configurations.implementation.allDependencies.each {
                    if (it.name == 'unspecified') {
                        it.name = myVersion
                    }
                }
            }
        }

        repositories {
            maven {
                name = "Jitpack"
                url 'https://jitpack.io'
            }
        }
    }
}

// type显示指定任务类型或任务, 这里指定要执行Javadoc这个task,这个task在gradle中已经定义
task androidJavadocs(type: Javadoc) {
    // 设置源码所在的位置
    source = android.sourceSets.main.java.sourceFiles
}

// 生成javadoc.jar
task androidJavadocsJar(type: Jar) {
    // 指定文档名称
    archiveClassifier = 'javadoc'
    from androidJavadocs.destinationDir
}

// 打包main目录下代码和资源的task，生成sources.jar
task androidSourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

//配置需要上传到maven仓库的文件
artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}